// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: remoteFunction.proto

#include "remoteFunction.pb.h"
#include "remoteFunction.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace func_call {

static const char* RemoteFunction_method_names[] = {
  "/func_call.RemoteFunction/addTwoNum",
  "/func_call.RemoteFunction/plusTwoNum",
  "/func_call.RemoteFunction/plusTwoNum2",
  "/func_call.RemoteFunction/plusTwoNum3",
};

std::unique_ptr< RemoteFunction::Stub> RemoteFunction::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RemoteFunction::Stub> stub(new RemoteFunction::Stub(channel, options));
  return stub;
}

RemoteFunction::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_addTwoNum_(RemoteFunction_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_plusTwoNum_(RemoteFunction_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_plusTwoNum2_(RemoteFunction_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_plusTwoNum3_(RemoteFunction_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status RemoteFunction::Stub::addTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::func_call::ans* response) {
  return ::grpc::internal::BlockingUnaryCall< ::func_call::Numbers, ::func_call::ans, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addTwoNum_, context, request, response);
}

void RemoteFunction::Stub::async::addTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers* request, ::func_call::ans* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::func_call::Numbers, ::func_call::ans, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addTwoNum_, context, request, response, std::move(f));
}

void RemoteFunction::Stub::async::addTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers* request, ::func_call::ans* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addTwoNum_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::func_call::ans>* RemoteFunction::Stub::PrepareAsyncaddTwoNumRaw(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::func_call::ans, ::func_call::Numbers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addTwoNum_, context, request);
}

::grpc::ClientAsyncResponseReader< ::func_call::ans>* RemoteFunction::Stub::AsyncaddTwoNumRaw(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddTwoNumRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::func_call::ans>* RemoteFunction::Stub::plusTwoNumRaw(::grpc::ClientContext* context, const ::func_call::Numbers& request) {
  return ::grpc::internal::ClientReaderFactory< ::func_call::ans>::Create(channel_.get(), rpcmethod_plusTwoNum_, context, request);
}

void RemoteFunction::Stub::async::plusTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers* request, ::grpc::ClientReadReactor< ::func_call::ans>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::func_call::ans>::Create(stub_->channel_.get(), stub_->rpcmethod_plusTwoNum_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::func_call::ans>* RemoteFunction::Stub::AsyncplusTwoNumRaw(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::func_call::ans>::Create(channel_.get(), cq, rpcmethod_plusTwoNum_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::func_call::ans>* RemoteFunction::Stub::PrepareAsyncplusTwoNumRaw(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::func_call::ans>::Create(channel_.get(), cq, rpcmethod_plusTwoNum_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::func_call::Numbers>* RemoteFunction::Stub::plusTwoNum2Raw(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response) {
  return ::grpc::internal::ClientWriterFactory< ::func_call::Numbers>::Create(channel_.get(), rpcmethod_plusTwoNum2_, context, response);
}

void RemoteFunction::Stub::async::plusTwoNum2(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response, ::grpc::ClientWriteReactor< ::func_call::Numbers>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::func_call::Numbers>::Create(stub_->channel_.get(), stub_->rpcmethod_plusTwoNum2_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::func_call::Numbers>* RemoteFunction::Stub::AsyncplusTwoNum2Raw(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::func_call::Numbers>::Create(channel_.get(), cq, rpcmethod_plusTwoNum2_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::func_call::Numbers>* RemoteFunction::Stub::PrepareAsyncplusTwoNum2Raw(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::func_call::Numbers>::Create(channel_.get(), cq, rpcmethod_plusTwoNum2_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::func_call::Numbers, ::func_call::SquareTwoNum>* RemoteFunction::Stub::plusTwoNum3Raw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::func_call::Numbers, ::func_call::SquareTwoNum>::Create(channel_.get(), rpcmethod_plusTwoNum3_, context);
}

void RemoteFunction::Stub::async::plusTwoNum3(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::func_call::Numbers,::func_call::SquareTwoNum>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::func_call::Numbers,::func_call::SquareTwoNum>::Create(stub_->channel_.get(), stub_->rpcmethod_plusTwoNum3_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::func_call::Numbers, ::func_call::SquareTwoNum>* RemoteFunction::Stub::AsyncplusTwoNum3Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::func_call::Numbers, ::func_call::SquareTwoNum>::Create(channel_.get(), cq, rpcmethod_plusTwoNum3_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::func_call::Numbers, ::func_call::SquareTwoNum>* RemoteFunction::Stub::PrepareAsyncplusTwoNum3Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::func_call::Numbers, ::func_call::SquareTwoNum>::Create(channel_.get(), cq, rpcmethod_plusTwoNum3_, context, false, nullptr);
}

RemoteFunction::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteFunction_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteFunction::Service, ::func_call::Numbers, ::func_call::ans, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteFunction::Service* service,
             ::grpc::ServerContext* ctx,
             const ::func_call::Numbers* req,
             ::func_call::ans* resp) {
               return service->addTwoNum(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteFunction_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RemoteFunction::Service, ::func_call::Numbers, ::func_call::ans>(
          [](RemoteFunction::Service* service,
             ::grpc::ServerContext* ctx,
             const ::func_call::Numbers* req,
             ::grpc::ServerWriter<::func_call::ans>* writer) {
               return service->plusTwoNum(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteFunction_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< RemoteFunction::Service, ::func_call::Numbers, ::func_call::SquareTwoNum>(
          [](RemoteFunction::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::func_call::Numbers>* reader,
             ::func_call::SquareTwoNum* resp) {
               return service->plusTwoNum2(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteFunction_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< RemoteFunction::Service, ::func_call::Numbers, ::func_call::SquareTwoNum>(
          [](RemoteFunction::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::func_call::SquareTwoNum,
             ::func_call::Numbers>* stream) {
               return service->plusTwoNum3(ctx, stream);
             }, this)));
}

RemoteFunction::Service::~Service() {
}

::grpc::Status RemoteFunction::Service::addTwoNum(::grpc::ServerContext* context, const ::func_call::Numbers* request, ::func_call::ans* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteFunction::Service::plusTwoNum(::grpc::ServerContext* context, const ::func_call::Numbers* request, ::grpc::ServerWriter< ::func_call::ans>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteFunction::Service::plusTwoNum2(::grpc::ServerContext* context, ::grpc::ServerReader< ::func_call::Numbers>* reader, ::func_call::SquareTwoNum* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteFunction::Service::plusTwoNum3(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::func_call::SquareTwoNum, ::func_call::Numbers>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace func_call


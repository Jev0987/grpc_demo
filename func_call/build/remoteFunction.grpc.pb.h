// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: remoteFunction.proto
// Original file comments:
//
// @Descripttion: 
// @Author: jev
// @version: 
// @Date: 2024-10-30
// @LastEditors: jev
// @LastEditTime: 2024-10-31
#ifndef GRPC_remoteFunction_2eproto__INCLUDED
#define GRPC_remoteFunction_2eproto__INCLUDED

#include "remoteFunction.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace func_call {

class RemoteFunction final {
 public:
  static constexpr char const* service_full_name() {
    return "func_call.RemoteFunction";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 两个数字相加
    virtual ::grpc::Status addTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::func_call::ans* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::func_call::ans>> AsyncaddTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::func_call::ans>>(AsyncaddTwoNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::func_call::ans>> PrepareAsyncaddTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::func_call::ans>>(PrepareAsyncaddTwoNumRaw(context, request, cq));
    }
    // 两个数字相加，返回流
    std::unique_ptr< ::grpc::ClientReaderInterface< ::func_call::ans>> plusTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::func_call::ans>>(plusTwoNumRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::func_call::ans>> AsyncplusTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::func_call::ans>>(AsyncplusTwoNumRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::func_call::ans>> PrepareAsyncplusTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::func_call::ans>>(PrepareAsyncplusTwoNumRaw(context, request, cq));
    }
    // 接受流数据，返回结果
    std::unique_ptr< ::grpc::ClientWriterInterface< ::func_call::Numbers>> plusTwoNum2(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::func_call::Numbers>>(plusTwoNum2Raw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::func_call::Numbers>> AsyncplusTwoNum2(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::func_call::Numbers>>(AsyncplusTwoNum2Raw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::func_call::Numbers>> PrepareAsyncplusTwoNum2(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::func_call::Numbers>>(PrepareAsyncplusTwoNum2Raw(context, response, cq));
    }
    // 双向流
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::func_call::Numbers, ::func_call::SquareTwoNum>> plusTwoNum3(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::func_call::Numbers, ::func_call::SquareTwoNum>>(plusTwoNum3Raw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::func_call::Numbers, ::func_call::SquareTwoNum>> AsyncplusTwoNum3(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::func_call::Numbers, ::func_call::SquareTwoNum>>(AsyncplusTwoNum3Raw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::func_call::Numbers, ::func_call::SquareTwoNum>> PrepareAsyncplusTwoNum3(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::func_call::Numbers, ::func_call::SquareTwoNum>>(PrepareAsyncplusTwoNum3Raw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 两个数字相加
      virtual void addTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers* request, ::func_call::ans* response, std::function<void(::grpc::Status)>) = 0;
      virtual void addTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers* request, ::func_call::ans* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 两个数字相加，返回流
      virtual void plusTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers* request, ::grpc::ClientReadReactor< ::func_call::ans>* reactor) = 0;
      // 接受流数据，返回结果
      virtual void plusTwoNum2(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response, ::grpc::ClientWriteReactor< ::func_call::Numbers>* reactor) = 0;
      // 双向流
      virtual void plusTwoNum3(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::func_call::Numbers,::func_call::SquareTwoNum>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::func_call::ans>* AsyncaddTwoNumRaw(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::func_call::ans>* PrepareAsyncaddTwoNumRaw(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::func_call::ans>* plusTwoNumRaw(::grpc::ClientContext* context, const ::func_call::Numbers& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::func_call::ans>* AsyncplusTwoNumRaw(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::func_call::ans>* PrepareAsyncplusTwoNumRaw(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::func_call::Numbers>* plusTwoNum2Raw(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::func_call::Numbers>* AsyncplusTwoNum2Raw(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::func_call::Numbers>* PrepareAsyncplusTwoNum2Raw(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::func_call::Numbers, ::func_call::SquareTwoNum>* plusTwoNum3Raw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::func_call::Numbers, ::func_call::SquareTwoNum>* AsyncplusTwoNum3Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::func_call::Numbers, ::func_call::SquareTwoNum>* PrepareAsyncplusTwoNum3Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status addTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::func_call::ans* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::func_call::ans>> AsyncaddTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::func_call::ans>>(AsyncaddTwoNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::func_call::ans>> PrepareAsyncaddTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::func_call::ans>>(PrepareAsyncaddTwoNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::func_call::ans>> plusTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::func_call::ans>>(plusTwoNumRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::func_call::ans>> AsyncplusTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::func_call::ans>>(AsyncplusTwoNumRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::func_call::ans>> PrepareAsyncplusTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::func_call::ans>>(PrepareAsyncplusTwoNumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::func_call::Numbers>> plusTwoNum2(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::func_call::Numbers>>(plusTwoNum2Raw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::func_call::Numbers>> AsyncplusTwoNum2(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::func_call::Numbers>>(AsyncplusTwoNum2Raw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::func_call::Numbers>> PrepareAsyncplusTwoNum2(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::func_call::Numbers>>(PrepareAsyncplusTwoNum2Raw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::func_call::Numbers, ::func_call::SquareTwoNum>> plusTwoNum3(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::func_call::Numbers, ::func_call::SquareTwoNum>>(plusTwoNum3Raw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::func_call::Numbers, ::func_call::SquareTwoNum>> AsyncplusTwoNum3(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::func_call::Numbers, ::func_call::SquareTwoNum>>(AsyncplusTwoNum3Raw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::func_call::Numbers, ::func_call::SquareTwoNum>> PrepareAsyncplusTwoNum3(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::func_call::Numbers, ::func_call::SquareTwoNum>>(PrepareAsyncplusTwoNum3Raw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void addTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers* request, ::func_call::ans* response, std::function<void(::grpc::Status)>) override;
      void addTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers* request, ::func_call::ans* response, ::grpc::ClientUnaryReactor* reactor) override;
      void plusTwoNum(::grpc::ClientContext* context, const ::func_call::Numbers* request, ::grpc::ClientReadReactor< ::func_call::ans>* reactor) override;
      void plusTwoNum2(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response, ::grpc::ClientWriteReactor< ::func_call::Numbers>* reactor) override;
      void plusTwoNum3(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::func_call::Numbers,::func_call::SquareTwoNum>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::func_call::ans>* AsyncaddTwoNumRaw(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::func_call::ans>* PrepareAsyncaddTwoNumRaw(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::func_call::ans>* plusTwoNumRaw(::grpc::ClientContext* context, const ::func_call::Numbers& request) override;
    ::grpc::ClientAsyncReader< ::func_call::ans>* AsyncplusTwoNumRaw(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::func_call::ans>* PrepareAsyncplusTwoNumRaw(::grpc::ClientContext* context, const ::func_call::Numbers& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::func_call::Numbers>* plusTwoNum2Raw(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response) override;
    ::grpc::ClientAsyncWriter< ::func_call::Numbers>* AsyncplusTwoNum2Raw(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::func_call::Numbers>* PrepareAsyncplusTwoNum2Raw(::grpc::ClientContext* context, ::func_call::SquareTwoNum* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::func_call::Numbers, ::func_call::SquareTwoNum>* plusTwoNum3Raw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::func_call::Numbers, ::func_call::SquareTwoNum>* AsyncplusTwoNum3Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::func_call::Numbers, ::func_call::SquareTwoNum>* PrepareAsyncplusTwoNum3Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_addTwoNum_;
    const ::grpc::internal::RpcMethod rpcmethod_plusTwoNum_;
    const ::grpc::internal::RpcMethod rpcmethod_plusTwoNum2_;
    const ::grpc::internal::RpcMethod rpcmethod_plusTwoNum3_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 两个数字相加
    virtual ::grpc::Status addTwoNum(::grpc::ServerContext* context, const ::func_call::Numbers* request, ::func_call::ans* response);
    // 两个数字相加，返回流
    virtual ::grpc::Status plusTwoNum(::grpc::ServerContext* context, const ::func_call::Numbers* request, ::grpc::ServerWriter< ::func_call::ans>* writer);
    // 接受流数据，返回结果
    virtual ::grpc::Status plusTwoNum2(::grpc::ServerContext* context, ::grpc::ServerReader< ::func_call::Numbers>* reader, ::func_call::SquareTwoNum* response);
    // 双向流
    virtual ::grpc::Status plusTwoNum3(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::func_call::SquareTwoNum, ::func_call::Numbers>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_addTwoNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addTwoNum() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_addTwoNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTwoNum(::grpc::ServerContext* /*context*/, const ::func_call::Numbers* /*request*/, ::func_call::ans* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddTwoNum(::grpc::ServerContext* context, ::func_call::Numbers* request, ::grpc::ServerAsyncResponseWriter< ::func_call::ans>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_plusTwoNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_plusTwoNum() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_plusTwoNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status plusTwoNum(::grpc::ServerContext* /*context*/, const ::func_call::Numbers* /*request*/, ::grpc::ServerWriter< ::func_call::ans>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestplusTwoNum(::grpc::ServerContext* context, ::func_call::Numbers* request, ::grpc::ServerAsyncWriter< ::func_call::ans>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_plusTwoNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_plusTwoNum2() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_plusTwoNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status plusTwoNum2(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::func_call::Numbers>* /*reader*/, ::func_call::SquareTwoNum* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestplusTwoNum2(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::func_call::SquareTwoNum, ::func_call::Numbers>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_plusTwoNum3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_plusTwoNum3() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_plusTwoNum3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status plusTwoNum3(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::func_call::SquareTwoNum, ::func_call::Numbers>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestplusTwoNum3(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::func_call::SquareTwoNum, ::func_call::Numbers>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_addTwoNum<WithAsyncMethod_plusTwoNum<WithAsyncMethod_plusTwoNum2<WithAsyncMethod_plusTwoNum3<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_addTwoNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_addTwoNum() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::func_call::Numbers, ::func_call::ans>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::func_call::Numbers* request, ::func_call::ans* response) { return this->addTwoNum(context, request, response); }));}
    void SetMessageAllocatorFor_addTwoNum(
        ::grpc::MessageAllocator< ::func_call::Numbers, ::func_call::ans>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::func_call::Numbers, ::func_call::ans>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_addTwoNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTwoNum(::grpc::ServerContext* /*context*/, const ::func_call::Numbers* /*request*/, ::func_call::ans* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addTwoNum(
      ::grpc::CallbackServerContext* /*context*/, const ::func_call::Numbers* /*request*/, ::func_call::ans* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_plusTwoNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_plusTwoNum() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::func_call::Numbers, ::func_call::ans>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::func_call::Numbers* request) { return this->plusTwoNum(context, request); }));
    }
    ~WithCallbackMethod_plusTwoNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status plusTwoNum(::grpc::ServerContext* /*context*/, const ::func_call::Numbers* /*request*/, ::grpc::ServerWriter< ::func_call::ans>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::func_call::ans>* plusTwoNum(
      ::grpc::CallbackServerContext* /*context*/, const ::func_call::Numbers* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_plusTwoNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_plusTwoNum2() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::func_call::Numbers, ::func_call::SquareTwoNum>(
            [this](
                   ::grpc::CallbackServerContext* context, ::func_call::SquareTwoNum* response) { return this->plusTwoNum2(context, response); }));
    }
    ~WithCallbackMethod_plusTwoNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status plusTwoNum2(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::func_call::Numbers>* /*reader*/, ::func_call::SquareTwoNum* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::func_call::Numbers>* plusTwoNum2(
      ::grpc::CallbackServerContext* /*context*/, ::func_call::SquareTwoNum* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_plusTwoNum3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_plusTwoNum3() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::func_call::Numbers, ::func_call::SquareTwoNum>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->plusTwoNum3(context); }));
    }
    ~WithCallbackMethod_plusTwoNum3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status plusTwoNum3(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::func_call::SquareTwoNum, ::func_call::Numbers>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::func_call::Numbers, ::func_call::SquareTwoNum>* plusTwoNum3(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_addTwoNum<WithCallbackMethod_plusTwoNum<WithCallbackMethod_plusTwoNum2<WithCallbackMethod_plusTwoNum3<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_addTwoNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addTwoNum() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_addTwoNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTwoNum(::grpc::ServerContext* /*context*/, const ::func_call::Numbers* /*request*/, ::func_call::ans* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_plusTwoNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_plusTwoNum() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_plusTwoNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status plusTwoNum(::grpc::ServerContext* /*context*/, const ::func_call::Numbers* /*request*/, ::grpc::ServerWriter< ::func_call::ans>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_plusTwoNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_plusTwoNum2() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_plusTwoNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status plusTwoNum2(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::func_call::Numbers>* /*reader*/, ::func_call::SquareTwoNum* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_plusTwoNum3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_plusTwoNum3() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_plusTwoNum3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status plusTwoNum3(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::func_call::SquareTwoNum, ::func_call::Numbers>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_addTwoNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addTwoNum() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_addTwoNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTwoNum(::grpc::ServerContext* /*context*/, const ::func_call::Numbers* /*request*/, ::func_call::ans* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddTwoNum(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_plusTwoNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_plusTwoNum() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_plusTwoNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status plusTwoNum(::grpc::ServerContext* /*context*/, const ::func_call::Numbers* /*request*/, ::grpc::ServerWriter< ::func_call::ans>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestplusTwoNum(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_plusTwoNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_plusTwoNum2() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_plusTwoNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status plusTwoNum2(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::func_call::Numbers>* /*reader*/, ::func_call::SquareTwoNum* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestplusTwoNum2(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_plusTwoNum3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_plusTwoNum3() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_plusTwoNum3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status plusTwoNum3(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::func_call::SquareTwoNum, ::func_call::Numbers>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestplusTwoNum3(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_addTwoNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_addTwoNum() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addTwoNum(context, request, response); }));
    }
    ~WithRawCallbackMethod_addTwoNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTwoNum(::grpc::ServerContext* /*context*/, const ::func_call::Numbers* /*request*/, ::func_call::ans* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addTwoNum(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_plusTwoNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_plusTwoNum() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->plusTwoNum(context, request); }));
    }
    ~WithRawCallbackMethod_plusTwoNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status plusTwoNum(::grpc::ServerContext* /*context*/, const ::func_call::Numbers* /*request*/, ::grpc::ServerWriter< ::func_call::ans>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* plusTwoNum(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_plusTwoNum2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_plusTwoNum2() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->plusTwoNum2(context, response); }));
    }
    ~WithRawCallbackMethod_plusTwoNum2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status plusTwoNum2(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::func_call::Numbers>* /*reader*/, ::func_call::SquareTwoNum* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* plusTwoNum2(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_plusTwoNum3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_plusTwoNum3() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->plusTwoNum3(context); }));
    }
    ~WithRawCallbackMethod_plusTwoNum3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status plusTwoNum3(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::func_call::SquareTwoNum, ::func_call::Numbers>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* plusTwoNum3(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addTwoNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addTwoNum() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::func_call::Numbers, ::func_call::ans>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::func_call::Numbers, ::func_call::ans>* streamer) {
                       return this->StreamedaddTwoNum(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addTwoNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addTwoNum(::grpc::ServerContext* /*context*/, const ::func_call::Numbers* /*request*/, ::func_call::ans* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddTwoNum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::func_call::Numbers,::func_call::ans>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_addTwoNum<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_plusTwoNum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_plusTwoNum() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::func_call::Numbers, ::func_call::ans>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::func_call::Numbers, ::func_call::ans>* streamer) {
                       return this->StreamedplusTwoNum(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_plusTwoNum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status plusTwoNum(::grpc::ServerContext* /*context*/, const ::func_call::Numbers* /*request*/, ::grpc::ServerWriter< ::func_call::ans>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedplusTwoNum(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::func_call::Numbers,::func_call::ans>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_plusTwoNum<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_addTwoNum<WithSplitStreamingMethod_plusTwoNum<Service > > StreamedService;
};

}  // namespace func_call


#endif  // GRPC_remoteFunction_2eproto__INCLUDED
